"""
Django settings for logdemo project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#7kdris!pdp+2jy94zs+-7162i)#haw6ckw%&c+0a^g(-4_e$='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'shop',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'logdemo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'logdemo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# -------------------------------------------------------------------
# Ensure a logs directory exists. All files will go under ./logs
# -------------------------------------------------------------------
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

# -------------------------------------------------------------------
# Optional: enable colored console if "colorlog" is available.
# We won’t crash if not installed—we fall back to plain.
# -------------------------------------------------------------------
try:
    import colorlog  # noqa
    COLORLOG_AVAILABLE = True
except Exception:
    COLORLOG_AVAILABLE = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # ---------------------- FORMATTERS (HOW) -----------------------
    'formatters': {
        # Verbose format for files & console fallback.
        'verbose': {
            # {name} shows full logger name (e.g., core.views)
            # {module} is just the module (e.g., views)
            'format': '{levelname} {asctime} {name} {module} {message}',
            'style': '{',  # ✅ MUST be one of '%', '{', '$'
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        # Optional colorized console formatter (if colorlog present)
        'colored': {
            '()': 'colorlog.ColoredFormatter',
            # %(log_color)s injects colors per level into the line
            'format': '%(log_color)s%(levelname)-8s%(asctime)s %(name)s %(message)s',
            'log_colors': {
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'bold_red',
            },
        } if COLORLOG_AVAILABLE else {
            # If colorlog not available, we point "colored" to "verbose"
            'format': '{levelname} {asctime} {name} {module} {message}',
            'style': '{',
        },
    },

    # ---------------------- HANDLERS (WHERE) ----------------------
    'handlers': {
        # Console: colored if possible; else verbose text.
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'colored' if COLORLOG_AVAILABLE else 'verbose',
        },

        # Project-wide file (everything important ends up here)
        'all_file': {
            'class': 'logging.FileHandler',
            'filename': str(LOG_DIR / 'project_all.log'),
            'formatter': 'verbose',
        },

        # Per-app files
        'core_file': {
            'class': 'logging.FileHandler',
            'filename': str(LOG_DIR / 'core.log'),
            'formatter': 'verbose',
        },
        'shop_file': {
            'class': 'logging.FileHandler',
            'filename': str(LOG_DIR / 'shop.log'),
            'formatter': 'verbose',
        },

        # Request error file (HTTP 4xx/5xx)
        'request_file': {
            'class': 'logging.FileHandler',
            'filename': str(LOG_DIR / 'requests.log'),
            'formatter': 'verbose',
        },

        # Example of rotating file (swap any FileHandler with this)
        # 'all_rotating': {
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': str(LOG_DIR / 'project_all.log'),
        #     'maxBytes': 5 * 1024 * 1024,  # 5 MB
        #     'backupCount': 3,
        #     'formatter': 'verbose',
        # },
    },

    # ----------------------- LOGGERS (WHO) ------------------------
    'loggers': {
        # Framework-level logs (startup, middleware, etc.)
        'django': {
            'handlers': ['console', 'all_file'],
            'level': 'INFO',
            'propagate': False,
        },

        # HTTP request/response errors (4xx/5xx)
        'django.request': {
            'handlers': ['console', 'request_file', 'all_file'],
            'level': 'WARNING',
            'propagate': False,
        },

        # Uncomment to see SQL queries (VERY noisy)
        # 'django.db.backends': {
        #     'handlers': ['console', 'all_file'],
        #     'level': 'DEBUG',
        #     'propagate': False,
        # },

        # App loggers — anything under "core.*" inherits 'core' config.
        'core': {
            'handlers': ['console', 'core_file', 'all_file'],
            'level': 'DEBUG',
            'propagate': False,  # prevents duplicate bubbling
        },
        'shop': {
            'handlers': ['console', 'shop_file', 'all_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}